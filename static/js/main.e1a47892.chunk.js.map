{"version":3,"sources":["components/Shared/Tracking/index.js","components/Navigation/index.js","components/Table/filters.js","data/index.js","components/PatternFrequencies/index.js","components/Table/index.js","components/Tips/index.js","components/Acknowledgements/index.js","components/Tabs/index.js","components/App.js","index.js"],"names":["Event","category","action","label","ReactGA","event","Navigation","Navbar","color","light","Container","NavbarBrand","onClick","Nav","className","navbar","NavItem","NavLink","target","href","CreateDropDownListHelper","options","filterValue","setFilter","value","onChange","e","map","option","idx","DefaultColumnFilter","column","preFilteredRows","count","length","placeholder","SelectDifficultyColumnFilter","SelectColumnFilter","id","React","useMemo","set","Set","forEach","row","String","values","split","add","sort","sortBy","Easy","Medium","Hard","questions","name","url","pattern","difficulty","premium","companies","a","b","PatternFrequencies","filters","patternsMap","rows","reduce","acc","i","original","Object","create","sortedPatternsByFrequency","keys","showComponent","find","filter","includes","getFrequencyClass","rate","highestFrequency","Math","round","frequencyRate","easy","medium","hard","key","index","Badge","pill","iconPath","process","Table","data","useState","resetCount","setResetCount","checkedList","JSON","parse","localStorage","getItem","Array","fill","notesList","resizedCheckedList","window","setItem","stringify","difficultyMap","totalDifficultyCount","difficultyCount","setDifficultyCount","checked","setChecked","notes","setNotes","showPatterns","setShowPatterns","useEffect","defaultColumn","Filter","minWidth","maxWidth","resetHandler","columns","Header","Button","outline","size","Cell","cellInfo","Number","type","additive","accessor","disableSortBy","disableFilters","htmlFor","defaultChecked","icons","unchecked","patterns","Row","toLowerCase","style","whiteSpace","display","sortType","company","src","alt","cols","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","filteredRows","state","prepareRow","borderless","striped","hover","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","title","render","isSorted","isSortedDesc","canFilter","getRowProps","cells","cell","getCellProps","Tips","source","imagePath","Blind","Educative","Hackernoon","Acknowledgements","Col","sm","Card","CardImg","top","width","CardBody","CardTitle","CardSubtitle","Tabs","activeTab","setActiveTab","toggle","tab","tabs","classnames","active","TabContent","TabPane","tabId","App","trackingID","debug","initialize","pageview","location","pathname","search","Component","ReactDOM","document","getElementById"],"mappings":"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ZC,SAAS,EACTC,UAAW,CACT,SACA,YACA,QACA,WACA,OACA,gBACA,UAGJ,CACEtB,GAAI,GACJiB,KAAM,kBACNC,IAAK,iDACLC,QAAS,CAAC,uBACVC,WAAY,OACZC,SAAS,EACTC,UAAW,CAAC,SAAU,YAAa,SAAU,YAAa,QAAS,UAErE,CACEtB,GAAI,GACJiB,KAAM,eACNC,IAAK,8CACLC,QAAS,CAAC,uBACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,SACA,YACA,SACA,QACA,QACA,YACA,YACA,WACA,kBAGJ,CACEtB,GAAI,GACJiB,KAAM,kCACNC,IAAK,iEACLC,QAAS,CAAC,uBACVC,WAAY,OACZC,SAAS,EACTC,UAAW,CACT,SACA,WACA,QACA,QACA,YACA,YACA,WACA,gBACA,OACA,SACA,SACA,YACA,UACA,WACA,eAGJ,CACEtB,GAAI,GACJiB,KAAM,mBACNC,IAAK,kDACLC,QAAS,CAAC,uBACVC,WAAY,OACZC,SAAS,EACTC,UAAW,CACT,WACA,SACA,QACA,QACA,YACA,SACA,YACA,WACA,OACA,SACA,gBACA,aAGJ,CACEtB,GAAI,GACJiB,KAAM,8BACNC,IAAK,2DACLC,QAAS,CAAC,uBACVC,WAAY,OACZC,SAAS,EACTC,UAAW,CAAC,WAAY,UAE1B,CACEtB,GAAI,GACJiB,KAAM,kBACNC,IAAK,iDACLC,QAAS,CAAC,uBACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CAAC,SAAU,WAExB,CACEtB,GAAI,GACJiB,KAAM,cACNC,IAAK,6CACLC,QAAS,CAAC,uBACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CAAC,SAAU,YAAa,SAAU,UAE/C,CACEtB,GAAI,GACJiB,KAAM,2BACNC,IAAK,0DACLC,QAAS,CAAC,uBACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,WACA,SACA,YACA,SACA,QACA,WACA,cAGJ,CACEtB,GAAI,GACJiB,KAAM,iCACNC,IAAK,gEACLC,QAAS,CAAC,uBACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,SACA,SACA,WACA,YACA,QACA,cAGJ,CACEtB,GAAI,GACJiB,KAAM,gCACNC,IAAK,+DACLC,QAAS,CAAC,uBACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,SACA,YACA,QACA,QACA,WACA,SACA,SACA,aACA,YACA,WACA,UAGJ,CACEtB,GAAI,GACJiB,KAAM,aACNC,IAAK,4CACLC,QAAS,CAAC,uBACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,WACA,SACA,YACA,OACA,QACA,YACA,YACA,QACA,SACA,WACA,eAGJ,CACEtB,GAAI,GACJiB,KAAM,qBACNC,IAAK,oDACLC,QAAS,CAAC,uBACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CAAC,SAAU,SAAU,aAElC,CACEtB,GAAI,GACJiB,KAAM,cACNC,IAAK,6CACLC,QAAS,CAAC,uBACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,SACA,SACA,WACA,OACA,gBACA,YACA,YACA,aAGJ,CACEtB,GAAI,GACJiB,KAAM,eACNC,IAAK,8CACLC,QAAS,CAAC,uBACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,SACA,WACA,SACA,QACA,YACA,cAGJ,CACEtB,GAAI,GACJiB,KAAM,YACNC,IAAK,2CACLC,QAAS,CAAC,sBAAuB,UACjCC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,SACA,WACA,OACA,SACA,QACA,YACA,cAGJ,CACEtB,GAAI,GACJiB,KAAM,yBACNC,IAAK,wDACLC,QAAS,CAAC,uBACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CAAC,WAAY,YAAa,SAAU,kBAEjD,CACEtB,GAAI,GACJiB,KAAM,2CACNC,IACE,0EACFC,QAAS,CAAC,uBACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CAAC,SAAU,WAExB,CACEtB,GAAI,GACJiB,KAAM,6BACNC,IAAK,4DACLC,QAAS,CAAC,uBACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,WACA,SACA,SACA,YACA,OACA,QACA,cAGJ,CACEtB,GAAI,GACJiB,KAAM,mCACNC,IAAK,kEACLC,QAAS,CAAC,uBACVC,W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CLC,QAAS,CAAC,aACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,SACA,WACA,YACA,aACA,SACA,OACA,YACA,QACA,QACA,WACA,UACA,SACA,WACA,aAGJ,CACEtB,GAAI,GACJiB,KAAM,8BACNC,IAAK,6DACLC,QAAS,CAAC,aACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CAAC,WAAY,OAAQ,WAElC,CACEtB,GAAI,GACJiB,KAAM,4BACNC,IAAK,2DACLC,QAAS,CAAC,aACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CAAC,SAAU,WAAY,WAEpC,CACEtB,GAAI,GACJiB,KAAM,mBACNC,IAAK,kDACLC,QAAS,CAAC,OAAQ,aAClBC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,SACA,WACA,YACA,YACA,SACA,SACA,OACA,UACA,WACA,YACA,QACA,QACA,kBAGJ,CACEtB,GAAI,GACJiB,KAAM,iBACNC,IAAK,gDACLC,QAAS,CAAC,SAAU,QACpBC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,WACA,SACA,OACA,SACA,YACA,eAGJ,CACEtB,GAAI,GACJiB,KAAM,6CACNC,IACE,4EACFC,QAAS,CAAC,UACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CAAC,UAEd,CACEtB,GAAI,GACJiB,KAAM,kBACNC,IAAK,iDACLC,QAAS,CAAC,aACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,SACA,SACA,WACA,WACA,YACA,UACA,YAGJ,CACEtB,GAAI,GACJiB,KAAM,qBACNC,IAAK,oDACLC,QAAS,CAAC,OAAQ,UAClBC,WAAY,OACZC,SAAS,EACTC,UAAW,CACT,YACA,SACA,SACA,WACA,SACA,WACA,QACA,SACA,SAGJ,CACEtB,GAAI,GACJiB,KAAM,gBACNC,IAAK,+CACLC,QAAS,CAAC,iBACVC,WAAY,OACZC,SAAS,EACTC,UAAW,CAAC,QAAS,QAAS,OAAQ,kBAExC,CACEtB,GAAI,GACJiB,KAAM,2CACNC,IACE,0EACFC,QAAS,CAAC,iBACVC,WAAY,OACZC,SAAS,EACTC,UAAW,CAAC,aAEd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AAY,QAAS,UAEvD,CACEtB,GAAI,IACJiB,KAAM,eACNC,IAAK,8CACLC,QAAS,CAAC,OACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CAAC,YAAa,WAAY,SAAU,WAEjD,CACEtB,GAAI,IACJiB,KAAM,0CACNC,IACE,yEACFC,QAAS,CAAC,OACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,WACA,SACA,WACA,SACA,YACA,QACA,QACA,aACA,SACA,YACA,WAGJ,CACEtB,GAAI,IACJiB,KAAM,sBACNC,IAAK,qDACLC,QAAS,CAAC,OACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CAAC,WAEd,CACEtB,GAAI,IACJiB,KAAM,+BACNC,IAAK,8DACLC,QAAS,CAAC,OACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CAAC,SAAU,SAAU,YAAa,QAAS,UAExD,CACEtB,GAAI,IACJiB,KAAM,4DACNC,IACE,2FACFC,QAAS,CAAC,OACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CAAC,SAAU,YAAa,QAAS,YAAa,UAE3D,CACEtB,GAAI,IACJiB,KAAM,8BACNC,IAAK,6DACLC,QAAS,CAAC,OACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,SACA,YACA,YACA,WACA,SACA,QACA,QACA,YACA,SAGJ,CACEtB,GAAI,IACJiB,KAAM,+BACNC,IAAK,4DACLC,QAAS,CAAC,SAAU,QACpBC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,SACA,UACA,SACA,WACA,YACA,UAGJ,CACEtB,GAAI,IACJiB,KAAM,+BACNC,IAAK,8DACLC,QAAS,CAAC,OACVC,WAAY,OACZC,SAAS,EACTC,UAAW,CACT,WACA,SACA,SACA,YACA,QACA,YACA,SACA,aAGJ,CACEtB,GAAI,IACJiB,KAAM,wCACNC,IAAK,uEACLC,QAAS,CAAC,UACVC,WAAY,OACZC,SAAS,EACTC,UAAW,CACT,WACA,SACA,YACA,WACA,SACA,OACA,QACA,WACA,YACA,SACA,UAGJ,CACEtB,GAAI,IACJiB,KAAM,iBACNC,IAAK,gDACLC,QAAS,CAAC,MAAO,QACjBC,WAAY,OACZC,SAAS,EACTC,UAAW,CACT,SACA,OACA,YACA,QACA,UACA,WACA,WACA,YACA,SACA,eAGJ,CACEtB,GAAI,IACJiB,KAAM,+BACNC,IAAK,8DACLC,QAAS,CAAC,QACVC,WAAY,OACZC,SAAS,EACTC,UAAW,CACT,SACA,YACA,QACA,WACA,SACA,YACA,OACA,WAGJ,CACEtB,GAAI,IACJiB,KAAM,wBACNC,IAAK,uDACLC,QAAS,CAAC,QACVC,WAAY,OACZC,SAAS,EACTC,UAAW,CAAC,WAAY,WAE1B,CACEtB,GAAI,IACJiB,KAAM,UACNC,IAAK,yCACLC,QAAS,CAAC,gBACVC,WAAY,OACZC,SAAS,EACTC,UAAW,CACT,SACA,SACA,QACA,QACA,YACA,WACA,YACA,OACA,SACA,iBACA,UACA,aACA,gBACA,WACA,aAGJ,CACEtB,GAAI,IACJiB,KAAM,4BACNC,IAAK,2DACLC,QAAS,CAAC,gBACVC,WAAY,OACZC,SAAS,EACTC,UAAW,CAAC,WAAY,SAAU,SAAU,QAAS,QAAS,SAEhE,CACEtB,GAAI,IACJiB,KAAM,2BACNC,IAAK,0DACLC,QAAS,CAAC,gBACVC,WAAY,OACZC,SAAS,EACTC,UAAW,CAAC,WAAY,SAAU,QAAS,SAAU,cAEvD,CACEtB,GAAI,IACJiB,KAAM,QACNC,IAAK,sCACLC,QAAS,CAAC,gBACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,SACA,WACA,QACA,YACA,QACA,SACA,YACA,SACA,YACA,aACA,gBACA,OACA,WAGJ,CACEtB,GAAI,IACJiB,KAAM,gBACNC,IAAK,8CACLC,QAAS,CAAC,gBACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CACT,WACA,SACA,cACA,QACA,SACA,QACA,YACA,WAGJ,CACEtB,GAAI,IACJiB,KAAM,qCACNC,IAAK,8DACLC,QAAS,CAAC,gBACVC,WAAY,SACZC,SAAS,EACTC,UAAW,CAAC,WAAY,SAAU,cAEpC,CACEtB,GAAI,IACJiB,KAAM,eACNC,IAAK,6CACLC,QAAS,CAAC,gBACVC,WAAY,SACZC,SA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","file":"static/js/main.e1a47892.chunk.js","sourcesContent":["import ReactGA from 'react-ga';\n\nconst initGA = (trackingID, options) => {\n  ReactGA.initialize(trackingID, { ...options });\n};\n\nconst PageView = () => {\n  ReactGA.pageview(window.location.pathname + window.location.search);\n};\n\nconst Event = (category, action, label) => {\n  ReactGA.event({\n    category,\n    action,\n    label,\n  });\n};\n\nexport { initGA, PageView, Event };\n","import React from 'react';\nimport {\n  Container,\n  Nav,\n  Navbar,\n  NavbarBrand,\n  NavLink,\n  NavItem,\n} from 'reactstrap';\nimport { FaGithub } from 'react-icons/fa';\nimport { Event } from '../Shared/Tracking';\n\nimport './styles.scss';\n\nconst Navigation = () => {\n  return (\n    <Navbar color=\"light\" light>\n      <Container>\n        <NavbarBrand\n          onClick={() =>\n            Event('Navigation', 'Clicked link', 'Leetcode Patterns link')\n          }\n        >\n          Leetcode Patterns\n        </NavbarBrand>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink\n              target=\"_blank\"\n              href=\"https://github.com/SeanPrashad/leetcode-patterns\"\n              onClick={() => Event('Navigation', 'Clicked link', 'GitHub link')}\n            >\n              <FaGithub />\n            </NavLink>\n          </NavItem>\n        </Nav>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\n\nfunction CreateDropDownListHelper(options, filterValue, setFilter) {\n  return (\n    <select\n      value={filterValue}\n      onChange={e => {\n        setFilter(e.target.value || '');\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, idx) => (\n        <option key={`${idx + option}`} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  );\n}\n\nexport function DefaultColumnFilter({\n  // eslint-disable-next-line react/prop-types\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  // eslint-disable-next-line react/prop-types\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={e => {\n        setFilter(e.target.value || '');\n      }}\n      placeholder={`Search ${count} questions`}\n    />\n  );\n}\n\nexport function SelectDifficultyColumnFilter({\n  column: { filterValue, setFilter },\n}) {\n  const options = ['Easy', 'Medium', 'Hard'];\n\n  return CreateDropDownListHelper(options, filterValue, setFilter);\n}\n\nexport function SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  const options = React.useMemo(() => {\n    const set = new Set();\n\n    preFilteredRows.forEach(row => {\n      const values = String(row.values[id]).split(',');\n\n      values.forEach(value => {\n        set.add(value);\n      });\n    });\n\n    return [...set.values()].sort();\n  }, [id, preFilteredRows]);\n\n  return CreateDropDownListHelper(options, filterValue, setFilter);\n}\n","const questions = [\n  {\n    id: 0,\n    name: 'Contains Duplicate',\n    url: 'https://leetcode.com/problems/contains-duplicate/',\n    pattern: ['Arrays'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Adobe',\n      'Google',\n      'Bloomberg',\n      'Facebook',\n      'Apple',\n      'Microsoft',\n    ],\n  },\n  {\n    id: 1,\n    name: 'Missing Number',\n    url: 'https://leetcode.com/problems/missing-number/',\n    pattern: ['Arrays', 'Bit Manipulation'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Microsoft', 'Facebook', 'Amazon', 'Google', 'Adobe'],\n  },\n  {\n    id: 2,\n    name: 'Find All Numbers Disappeared in an Array',\n    url:\n      'https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/',\n    pattern: ['Arrays'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Facebook', 'Amazon'],\n  },\n  {\n    id: 3,\n    name: 'Single Number',\n    url: 'https://leetcode.com/problems/single-number/',\n    pattern: ['Arrays', 'Bit Manipulation'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Amazon', 'Microsoft', 'Adobe'],\n  },\n  {\n    id: 4,\n    name: 'Product of Array Except Self',\n    url: 'https://leetcode.com/problems/product-of-array-except-self/',\n    pattern: ['Arrays'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Amazon',\n      'Asana',\n      'Microsoft',\n      'Apple',\n      'Lyft',\n      'Adobe',\n      'Google',\n      'Uber',\n      'Goldman Sachs',\n      'Oracle',\n    ],\n  },\n  {\n    id: 5,\n    name: 'Find the Duplicate Number',\n    url: 'https://leetcode.com/problems/find-the-duplicate-number/',\n    pattern: ['Arrays', 'Binary Search', 'Two Pointers'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Google',\n      'Microsoft',\n      'Amazon',\n      'Adobe',\n      'Bloomberg',\n      'Facebook',\n      'Apple',\n    ],\n  },\n  {\n    id: 6,\n    name: 'Find All Duplicates in an Array',\n    url: 'https://leetcode.com/problems/find-all-duplicates-in-an-array/',\n    pattern: ['Arrays'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon', 'Google'],\n  },\n  {\n    id: 7,\n    name: 'Set Matrix Zeroes',\n    url: 'https://leetcode.com/problems/set-matrix-zeroes/',\n    pattern: ['Arrays'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Microsoft',\n      'Amazon',\n      'Apple',\n      'Adobe',\n      'Bloomberg',\n      'Oracle',\n    ],\n  },\n  {\n    id: 8,\n    name: 'Spiral Matrix',\n    url: 'https://leetcode.com/problems/spiral-matrix/',\n    pattern: ['Arrays'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Microsoft',\n      'Amazon',\n      'Facebook',\n      'Apple',\n      'Google',\n      'Oracle',\n      'Bloomberg',\n      'Intuit',\n      'Adobe',\n    ],\n  },\n  {\n    id: 9,\n    name: 'Rotate Image',\n    url: 'https://leetcode.com/problems/rotate-image/',\n    pattern: ['Arrays'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Facebook',\n      'Microsoft',\n      'Apple',\n      'Bloomberg',\n      'Uber',\n      'Google',\n    ],\n  },\n  {\n    id: 10,\n    name: 'Word Search',\n    url: 'https://leetcode.com/problems/word-search/',\n    pattern: ['Backtracking'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Microsoft',\n      'Twitter',\n      'Facebook',\n      'Snapchat',\n      'Goldman Sachs',\n      'Google',\n      'Bloomberg',\n      'Apple',\n      'Adobe',\n      'Oracle',\n      'Qualtrics',\n    ],\n  },\n\n  {\n    id: 11,\n    name: 'First Missing Positive',\n    url: 'https://leetcode.com/problems/first-missing-positive/',\n    pattern: ['Arrays'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: ['Amazon', 'Microsoft', 'Facebook', 'Google', 'Adobe', 'Apple'],\n  },\n  {\n    id: 12,\n    name: 'Longest Consecutive Sequence',\n    url: 'https://leetcode.com/problems/longest-consecutive-sequence/',\n    pattern: ['Arrays'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Microsoft',\n      'Facebook',\n      'Amazon',\n      'Google',\n      'LinkedIn',\n      'Apple',\n      'Qualtrics',\n      'Goldman Sachs',\n      'Salesforce',\n    ],\n  },\n\n  {\n    id: 13,\n    name: 'Letter Case Permutation',\n    url: 'https://leetcode.com/problems/letter-case-permutation/',\n    pattern: ['Backtracking'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Microsoft'],\n  },\n  {\n    id: 14,\n    name: 'Subsets',\n    url: 'https://leetcode.com/problems/subsets/',\n    pattern: ['Backtracking'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Amazon',\n      'Google',\n      'Bloomberg',\n      'Goldman Sachs',\n      'Adobe',\n      'Twitter',\n    ],\n  },\n  {\n    id: 15,\n    name: 'Subsets II',\n    url: 'https://leetcode.com/problems/subsets-ii/',\n    pattern: ['Backtracking'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Facebook', 'Amazon', 'Bloomberg'],\n  },\n  {\n    id: 16,\n    name: 'Permutations',\n    url: 'https://leetcode.com/problems/permutations/',\n    pattern: ['Backtracking'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Facebook',\n      'LinkedIn',\n      'Bloomberg',\n      'Google',\n      'Microsoft',\n      'Adobe',\n      'Apple',\n      'Oracle',\n    ],\n  },\n  {\n    id: 17,\n    name: 'Permutations II',\n    url: 'https://leetcode.com/problems/permutations-ii/',\n    pattern: ['Backtracking'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['LinkedIn', 'Facebook', 'Amazon', 'Adobe', 'Apple'],\n  },\n  {\n    id: 18,\n    name: 'Combinations',\n    url: 'https://leetcode.com/problems/combinations/',\n    pattern: ['Backtracking'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Google', 'Facebook', 'Amazon'],\n  },\n  {\n    id: 19,\n    name: 'Combination Sum',\n    url: 'https://leetcode.com/problems/combination-sum/',\n    pattern: ['Backtracking'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Amazon',\n      'Airbnb',\n      'Apple',\n      'Adobe',\n      'Microsoft',\n      'LinkedIn',\n      'Goldman Sachs',\n      'Snapchat',\n      'Salesforce',\n    ],\n  },\n  {\n    id: 20,\n    name: 'Combination Sum II',\n    url: 'https://leetcode.com/problems/combination-sum-ii/',\n    pattern: ['Backtracking'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Facebook', 'Amazon'],\n  },\n  {\n    id: 21,\n    name: 'Combination Sum III',\n    url: 'https://leetcode.com/problems/combination-sum-iii/',\n    pattern: ['Backtracking'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Google'],\n  },\n  {\n    id: 22,\n    name: 'Generate Parentheses',\n    url: 'https://leetcode.com/problems/generate-parentheses/',\n    pattern: ['Backtracking'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Facebook',\n      'Microsoft',\n      'Apple',\n      'Bloomberg',\n      'Adobe',\n      'Uber',\n      'Google',\n      'Goldman Sachs',\n    ],\n  },\n  {\n    id: 23,\n    name: 'Target Sum',\n    url: 'https://leetcode.com/problems/target-sum/',\n    pattern: ['DFS', 'Dynamic Programming'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Facebook', 'Amazon', 'Microsoft', 'Adobe'],\n  },\n  {\n    id: 24,\n    name: 'Palindrome Partitioning',\n    url: 'https://leetcode.com/problems/palindrome-partitioning/',\n    pattern: ['Backtracking'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Apple'],\n  },\n  {\n    id: 25,\n    name: 'Letter Combinations of a Phone Number',\n    url: 'https://leetcode.com/problems/letter-combinations-of-a-phone-number/',\n    pattern: ['Backtracking'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Microsoft',\n      'Facebook',\n      'Google',\n      'Uber',\n      'Apple',\n      'Adobe',\n      'Twitter',\n      'Bloomberg',\n      'Oracle',\n      'Goldman Sachs',\n      'Snapchat',\n      'Intuit',\n    ],\n  },\n  {\n    id: 26,\n    name: 'Generalized Abbreviation',\n    url: 'https://leetcode.com/problems/generalized-abbreviation/',\n    pattern: ['Backtracking'],\n    difficulty: 'Medium',\n    premium: true,\n    companies: ['', 'Google'],\n  },\n  {\n    id: 27,\n    name: 'Sudoku Solver',\n    url: 'https://leetcode.com/problems/sudoku-solver/',\n    pattern: ['Backtracking'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: ['', 'Google', 'Intuit', 'Amazon', 'Apple', 'Uber', 'Bloomberg'],\n  },\n  {\n    id: 28,\n    name: 'N-Queens',\n    url: 'https://leetcode.com/problems/n-queens/',\n    pattern: ['Backtracking'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Microsoft',\n      'Apple',\n      'Facebook',\n      'Uber',\n      'Goldman Sachs',\n      'Adobe',\n    ],\n  },\n  {\n    id: 29,\n    name: 'Climbing Stairs',\n    url: 'https://leetcode.com/problems/climbing-stairs/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Amazon', 'Microsoft', 'Google', 'Bloomberg', 'Apple', 'Adobe'],\n  },\n  {\n    id: 30,\n    name: 'House Robber',\n    url: 'https://leetcode.com/problems/house-robber/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Microsoft',\n      'Google',\n      'Apple',\n      'Adobe',\n      'Qualtrics',\n      'Bloomberg',\n      'Facebook',\n      'Goldman Sachs',\n    ],\n  },\n  {\n    id: 31,\n    name: 'Best Time to Buy and Sell Stock',\n    url: 'https://leetcode.com/problems/best-time-to-buy-and-sell-stock/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Facebook',\n      'Apple',\n      'Adobe',\n      'Microsoft',\n      'Bloomberg',\n      'Snapchat',\n      'Goldman Sachs',\n      'Uber',\n      'Oracle',\n      'Google',\n      'BlackRock',\n      'Citadel',\n      'JPMorgan',\n      'Salesforce',\n    ],\n  },\n  {\n    id: 32,\n    name: 'Maximum Subarray',\n    url: 'https://leetcode.com/problems/maximum-subarray/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: [\n      'LinkedIn',\n      'Amazon',\n      'Adobe',\n      'Apple',\n      'Microsoft',\n      'Google',\n      'Bloomberg',\n      'Facebook',\n      'Uber',\n      'Oracle',\n      'Goldman Sachs',\n      'JPMorgan',\n    ],\n  },\n  {\n    id: 33,\n    name: 'Range Sum Query - Immutable',\n    url: 'https://leetcode.com/problems/range-sum-query-immutable/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Facebook', 'Adobe'],\n  },\n  {\n    id: 34,\n    name: 'House Robber II',\n    url: 'https://leetcode.com/problems/house-robber-ii/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon', 'Google'],\n  },\n  {\n    id: 35,\n    name: 'Coin Change',\n    url: 'https://leetcode.com/problems/coin-change/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon', 'Microsoft', 'Google', 'Apple'],\n  },\n  {\n    id: 36,\n    name: 'Maximum Product Subarray',\n    url: 'https://leetcode.com/problems/maximum-product-subarray/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'LinkedIn',\n      'Amazon',\n      'Microsoft',\n      'Google',\n      'Apple',\n      'Facebook',\n      'Bloomberg',\n    ],\n  },\n  {\n    id: 37,\n    name: 'Longest Increasing Subsequence',\n    url: 'https://leetcode.com/problems/longest-increasing-subsequence/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Google',\n      'Amazon',\n      'Facebook',\n      'Microsoft',\n      'Apple',\n      'Bloomberg',\n    ],\n  },\n  {\n    id: 38,\n    name: 'Longest Palindromic Substring',\n    url: 'https://leetcode.com/problems/longest-palindromic-substring/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Microsoft',\n      'Adobe',\n      'Apple',\n      'Facebook',\n      'Google',\n      'Oracle',\n      'Salesforce',\n      'Bloomberg',\n      'LinkedIn',\n      'Tesla',\n    ],\n  },\n  {\n    id: 39,\n    name: 'Word Break',\n    url: 'https://leetcode.com/problems/word-break/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Amazon',\n      'Microsoft',\n      'Uber',\n      'Apple',\n      'Bloomberg',\n      'Qualtrics',\n      'Adobe',\n      'Google',\n      'Snapchat',\n      'Salesforce',\n    ],\n  },\n  {\n    id: 40,\n    name: 'Combination Sum IV',\n    url: 'https://leetcode.com/problems/combination-sum-iv/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Google', 'Amazon', 'Facebook'],\n  },\n  {\n    id: 41,\n    name: 'Decode Ways',\n    url: 'https://leetcode.com/problems/decode-ways/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Google',\n      'Snapchat',\n      'Lyft',\n      'Goldman Sachs',\n      'Microsoft',\n      'Bloomberg',\n      'JPMorgan',\n    ],\n  },\n  {\n    id: 42,\n    name: 'Unique Paths',\n    url: 'https://leetcode.com/problems/unique-paths/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Google',\n      'Facebook',\n      'Amazon',\n      'Apple',\n      'Microsoft',\n      'Bloomberg',\n    ],\n  },\n  {\n    id: 43,\n    name: 'Jump Game',\n    url: 'https://leetcode.com/problems/jump-game/',\n    pattern: ['Dynamic Programming', 'Greedy'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Facebook',\n      'Uber',\n      'Oracle',\n      'Adobe',\n      'Microsoft',\n      'Bloomberg',\n    ],\n  },\n  {\n    id: 44,\n    name: 'Palindromic Substrings',\n    url: 'https://leetcode.com/problems/palindromic-substrings/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Facebook', 'Microsoft', 'Google', 'Goldman Sachs'],\n  },\n  {\n    id: 45,\n    name: 'Number of Longest Increasing Subsequence',\n    url:\n      'https://leetcode.com/problems/number-of-longest-increasing-subsequence/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon', 'Google'],\n  },\n  {\n    id: 46,\n    name: 'Partition Equal Subset Sum',\n    url: 'https://leetcode.com/problems/partition-equal-subset-sum/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Google',\n      'Amazon',\n      'Microsoft',\n      'Uber',\n      'Apple',\n      'Bloomberg',\n    ],\n  },\n  {\n    id: 47,\n    name: 'Partition to K Equal Sum Subsets',\n    url: 'https://leetcode.com/problems/partition-to-k-equal-sum-subsets/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['LinkedIn', 'Facebook'],\n  },\n  {\n    id: 48,\n    name: 'Best Time to Buy and Sell Stock with Cooldown',\n    url:\n      'https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/',\n    pattern: ['Dynamic Programming'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Adobe', 'Bloomberg'],\n  },\n  {\n    id: 49,\n    name: 'Counting Bits',\n    url: 'https://leetcode.com/problems/counting-bits/',\n    pattern: ['Dynamic Programming', 'Bit Manipulation'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Google'],\n  },\n  {\n    id: 50,\n    name: 'Linked List Cycle',\n    url: 'https://leetcode.com/problems/linked-list-cycle/',\n    pattern: ['Fast & Slow Pointers'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: [\n      'Microsoft',\n      'Amazon',\n      'Bloomberg',\n      'Oracle',\n      'Facebook',\n      'Google',\n    ],\n  },\n  {\n    id: 51,\n    name: 'Middle of the Linked List',\n    url: 'https://leetcode.com/problems/middle-of-the-linked-list/',\n    pattern: ['Fast & Slow Pointers'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Amazon', 'Apple', 'Microsoft', 'Adobe', 'Goldman Sachs'],\n  },\n  {\n    id: 52,\n    name: 'Palindrome Linked List',\n    url: 'https://leetcode.com/problems/palindrome-linked-list/',\n    pattern: ['Fast & Slow Pointers'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Facebook', 'Amazon', 'Microsoft', 'Intuit', 'Bloomberg'],\n  },\n  {\n    id: 53,\n    name: 'Remove Linked List Elements',\n    url: 'https://leetcode.com/problems/remove-linked-list-elements/',\n    pattern: ['Fast & Slow Pointers'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Facebook', 'Microsoft'],\n  },\n  {\n    id: 54,\n    name: 'Remove Duplicates from Sorted List',\n    url: 'https://leetcode.com/problems/remove-duplicates-from-sorted-list/',\n    pattern: ['Fast & Slow Pointers'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Amazon', 'Adobe', 'Facebook', 'Microsoft'],\n  },\n  {\n    id: 55,\n    name: 'Linked List Cycle II',\n    url: 'https://leetcode.com/problems/linked-list-cycle-ii/',\n    pattern: ['Fast & Slow Pointers'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Microsoft', 'Amazon', 'Goldman Sachs', 'Oracle'],\n  },\n  {\n    id: 56,\n    name: 'Add Two Numbers',\n    url: 'https://leetcode.com/problems/add-two-numbers/',\n    pattern: ['Fast & Slow Pointers'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Bloomberg',\n      'Adobe',\n      'Microsoft',\n      'Facebook',\n      'Google',\n      'Apple',\n      'Uber',\n      'Capital One',\n      'Oracle',\n    ],\n  },\n  {\n    id: 57,\n    name: 'Remove Nth Node From End Of List',\n    url: 'https://leetcode.com/problems/remove-nth-node-from-end-of-list/',\n    pattern: ['Fast & Slow Pointers'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Facebook', 'Microsoft', 'Amazon', 'Google', 'Apple'],\n  },\n  {\n    id: 58,\n    name: 'Sort List',\n    url: 'https://leetcode.com/problems/sort-list/',\n    pattern: ['Fast & Slow Pointers'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Facebook', 'Amazon', 'Apple', 'Uber'],\n  },\n  {\n    id: 59,\n    name: 'Reorder List',\n    url: 'https://leetcode.com/problems/reorder-list/',\n    pattern: ['Fast & Slow Pointers'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon', 'Adobe', 'Facebook', 'Google', 'Snapchat', 'Uber'],\n  },\n  {\n    id: 60,\n    name: 'Clone Graph',\n    url: 'https://leetcode.com/problems/clone-graph/',\n    pattern: ['BFS', 'DFS', 'Graph'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Microsoft',\n      'Amazon',\n      'Salesforce',\n      'Google',\n      'Twitter',\n      'Bloomberg',\n      'Oracle',\n      'Apple',\n    ],\n  },\n  {\n    id: 61,\n    name: 'Pacific Atlantic Water Flow',\n    url: 'https://leetcode.com/problems/pacific-atlantic-water-flow/',\n    pattern: ['BFS', 'DFS'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook', 'Apple'],\n  },\n  {\n    id: 62,\n    name: 'Number of Islands',\n    url: 'https://leetcode.com/problems/number-of-islands/',\n    pattern: ['BFS', 'DFS', 'Union Find'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Microsoft',\n      'Bloomberg',\n      'Google',\n      'LinkedIn',\n      'Facebook',\n      'Apple',\n      'Oracle',\n      'Goldman Sachs',\n      'Salesforce',\n      'Lyft',\n      'Uber',\n      'Adobe',\n      'Qualtrics',\n    ],\n  },\n  {\n    id: 63,\n    name: 'Graph Valid Tree',\n    url: 'https://leetcode.com/problems/graph-valid-tree/',\n    pattern: ['BFS', 'DFS', 'Graph', 'Union Find'],\n    difficulty: 'Medium',\n    premium: true,\n    companies: ['LinkedIn', 'Google', 'Bloomberg'],\n  },\n  {\n    id: 64,\n    name: 'Number of Connected Components in an Undirected Graph',\n    url:\n      'https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/',\n    pattern: ['BFS', 'DFS', 'Graph', 'Union Find'],\n    difficulty: 'Medium',\n    premium: true,\n    companies: ['Amazon', 'LinkedIn', 'Facebook', 'Pinterest'],\n  },\n  {\n    id: 65,\n    name: 'Reverse Linked List',\n    url: 'https://leetcode.com/problems/reverse-linked-list/',\n    pattern: ['In-place reversal of a linked list'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Microsoft', 'Bloomberg', 'Amazon', 'Facebook', 'Apple'],\n  },\n  {\n    id: 66,\n    name: 'Reverse Linked List II',\n    url: 'https://leetcode.com/problems/reverse-linked-list-ii/',\n    pattern: ['In-place reversal of a linked list'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Apple', 'Facebook', 'Amazon', 'Google', 'Adobe'],\n  },\n  {\n    id: 67,\n    name: 'Rotate List',\n    url: 'https://leetcode.com/problems/rotate-list/',\n    pattern: ['In-place reversal of a linked list'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon', 'LinkedIn', 'Microsoft', 'Adobe', 'Apple', 'Oracle'],\n  },\n  {\n    id: 68,\n    name: 'Swap Nodes in Pairs',\n    url: 'https://leetcode.com/problems/swap-nodes-in-pairs/',\n    pattern: ['In-place reversal of a linked list'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Facebook', 'Amazon', 'Microsoft'],\n  },\n  {\n    id: 69,\n    name: 'Odd Even Linked List',\n    url: 'https://leetcode.com/problems/odd-even-linked-list/',\n    pattern: ['In-place reversal of a linked list'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Microsoft',\n      'Bloomberg',\n      'Amazon',\n      'Adobe',\n      'Apple',\n    ],\n  },\n  {\n    id: 70,\n    name: 'Reverse Nodes in k-Group',\n    url: 'https://leetcode.com/problems/reverse-nodes-in-k-group/',\n    pattern: ['In-place reversal of a linked list'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: [\n      'Capital One',\n      'Microsoft',\n      'Amazon',\n      'Google',\n      'Facebook',\n      'Snapchat',\n      'Oracle',\n    ],\n  },\n  {\n    id: 71,\n    name: 'Merge Two Sorted Lists',\n    url: 'https://leetcode.com/problems/merge-two-sorted-lists/',\n    pattern: ['Two Pointers'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Facebook',\n      'Microsoft',\n      'Adobe',\n      'Google',\n      'Bloomberg',\n      'Apple',\n      'Uber',\n    ],\n  },\n  {\n    id: 72,\n    name: 'Kth Smallest Element in a Sorted Matrix',\n    url:\n      'https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/',\n    pattern: ['Binary Search', 'Heap'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Facebook', 'Amazon', 'Microsoft', 'Bloomberg'],\n  },\n  {\n    id: 73,\n    name: 'Find K Pairs with Smallest Sums',\n    url: 'https://leetcode.com/problems/find-k-pairs-with-smallest-sums/',\n    pattern: ['Heap'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['LinkedIn', 'Microsoft', 'Apple'],\n  },\n  {\n    id: 74,\n    name: 'Merge k Sorted Lists',\n    url: 'https://leetcode.com/problems/merge-k-sorted-lists/',\n    pattern: ['Heap'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Amazon',\n      'Microsoft',\n      'Google',\n      'Apple',\n      'Bloomberg',\n      'Adobe',\n      'Uber',\n      'Qualtrics',\n      'Oracle',\n    ],\n  },\n  {\n    id: 75,\n    name: 'Smallest Range Covering Elements from K Lists',\n    url:\n      'https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists/',\n    pattern: ['Heap'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: ['Google', 'Amazon', 'Microsoft', 'Pinterest'],\n  },\n  {\n    id: 76,\n    name: 'Meeting Rooms',\n    url: 'https://leetcode.com/problems/meeting-rooms',\n    pattern: ['Intervals'],\n    difficulty: 'Easy',\n    premium: true,\n    companies: ['Amazon', 'Microsoft', 'Facebook'],\n  },\n  {\n    id: 77,\n    name: 'Merge Intervals',\n    url: 'https://leetcode.com/problems/merge-intervals/',\n    pattern: ['Intervals'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Facebook',\n      'Microsoft',\n      'Salesforce',\n      'Google',\n      'Uber',\n      'Bloomberg',\n      'Adobe',\n      'Apple',\n      'LinkedIn',\n      'Twitter',\n      'Oracle',\n      'JPMorgan',\n      'Snapchat',\n    ],\n  },\n  {\n    id: 78,\n    name: 'Interval List Intersections',\n    url: 'https://leetcode.com/problems/interval-list-intersections/',\n    pattern: ['Intervals'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Facebook', 'Uber', 'Google'],\n  },\n  {\n    id: 79,\n    name: 'Non-overlapping Intervals',\n    url: 'https://leetcode.com/problems/non-overlapping-intervals/',\n    pattern: ['Intervals'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon', 'Facebook', 'Oracle'],\n  },\n  {\n    id: 80,\n    name: 'Meeting Rooms II',\n    url: 'https://leetcode.com/problems/meeting-rooms-ii/',\n    pattern: ['Heap', 'Intervals'],\n    difficulty: 'Medium',\n    premium: true,\n    companies: [\n      'Amazon',\n      'Facebook',\n      'Bloomberg',\n      'Microsoft',\n      'Google',\n      'Oracle',\n      'Uber',\n      'Twitter',\n      'Snapchat',\n      'Qualtrics',\n      'Adobe',\n      'Quora',\n      'Goldman Sachs',\n    ],\n  },\n  {\n    id: 81,\n    name: 'Task Scheduler',\n    url: 'https://leetcode.com/problems/task-scheduler/',\n    pattern: ['Greedy', 'Heap'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Google',\n      'Uber',\n      'Amazon',\n      'Microsoft',\n      'Salesforce',\n    ],\n  },\n  {\n    id: 82,\n    name: 'Minimum Number of Arrows to Burst Balloons',\n    url:\n      'https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/',\n    pattern: ['Greedy'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Apple'],\n  },\n  {\n    id: 83,\n    name: 'Insert Interval',\n    url: 'https://leetcode.com/problems/insert-interval/',\n    pattern: ['Intervals'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Google',\n      'Facebook',\n      'LinkedIn',\n      'Microsoft',\n      'Twitter',\n      'Citadel',\n    ],\n  },\n  {\n    id: 84,\n    name: 'Employee Free Time',\n    url: 'https://leetcode.com/problems/employee-free-time/',\n    pattern: ['Heap', 'Greedy'],\n    difficulty: 'Hard',\n    premium: true,\n    companies: [\n      'Pinterest',\n      'Amazon',\n      'Airbnb',\n      'Snapchat',\n      'Google',\n      'Facebook',\n      'Apple',\n      'Oracle',\n      'Uber',\n    ],\n  },\n  {\n    id: 85,\n    name: 'Binary Search',\n    url: 'https://leetcode.com/problems/binary-search/',\n    pattern: ['Binary Search'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Adobe', 'Apple', 'Uber', 'Goldman Sachs'],\n  },\n  {\n    id: 86,\n    name: 'Find Smallest Letter Greater Than Target',\n    url:\n      'https://leetcode.com/problems/find-smallest-letter-greater-than-target/',\n    pattern: ['Binary Search'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['LinkedIn'],\n  },\n  {\n    id: 87,\n    name: 'Peak Index in a Mountain Array',\n    url: 'https://leetcode.com/problems/peak-index-in-a-mountain-array/',\n    pattern: ['Binary Search'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Google', 'Amazon', 'Bloomberg', 'Facebook'],\n  },\n  {\n    id: 88,\n    name: 'Find Minimum in Rotated Sorted Array',\n    url: 'https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/',\n    pattern: ['Binary Search'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Microsoft',\n      'Amazon',\n      'Bloomberg',\n      'Uber',\n      'Adobe',\n      'Apple',\n    ],\n  },\n  {\n    id: 89,\n    name: 'Find Peak Element',\n    url: 'https://leetcode.com/problems/find-peak-element/',\n    pattern: ['Binary Search'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Facebook', 'Amazon', 'Uber', 'Google', 'Microsoft'],\n  },\n  {\n    id: 90,\n    name: 'Search in Rotated Sorted Array',\n    url: 'https://leetcode.com/problems/search-in-rotated-sorted-array/',\n    pattern: ['Binary Search'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Microsoft',\n      'Amazon',\n      'LinkedIn',\n      'Facebook',\n      'Bloomberg',\n      'Adobe',\n      'Apple',\n      'Goldman Sachs',\n      'Oracle',\n      'Uber',\n      'Morgan Stanley',\n    ],\n  },\n  {\n    id: 91,\n    name: 'Search in Rotated Sorted Array II',\n    url: 'https://leetcode.com/problems/search-in-rotated-sorted-array-ii/',\n    pattern: ['Binary Search'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['LinkedIn', 'Amazon', 'Facebook', 'Microsoft'],\n  },\n  {\n    id: 92,\n    name: 'Search a 2D Matrix',\n    url: 'https://leetcode.com/problems/search-a-2d-matrix/',\n    pattern: ['Binary Search'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Facebook',\n      'Bloomberg',\n      'Microsoft',\n      'Uber',\n      'Google',\n      'Apple',\n    ],\n  },\n  {\n    id: 93,\n    name: 'Search a 2D Matrix II',\n    url: 'https://leetcode.com/problems/search-a-2d-matrix-ii/',\n    pattern: ['Binary Search'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Microsoft', 'Amazon', 'Facebook', 'Apple', 'Uber'],\n  },\n  {\n    id: 94,\n    name: 'Find K Closest Elements',\n    url: 'https://leetcode.com/problems/find-k-closest-elements/',\n    pattern: ['Binary Search'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Amazon',\n      'Google',\n      'Uber',\n      'Microsoft',\n      'Bloomberg',\n    ],\n  },\n  {\n    id: 95,\n    name: 'Count of Range Sum',\n    url: 'https://leetcode.com/problems/count-of-range-sum/',\n    pattern: ['Binary Search'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: ['Google'],\n  },\n  {\n    id: 96,\n    name: 'Minimum Size Subarray Sum',\n    url: 'https://leetcode.com/problems/minimum-size-subarray-sum/',\n    pattern: ['Sliding Window'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Goldman Sachs', 'Facebook', 'Amazon', 'Google'],\n  },\n  {\n    id: 97,\n    name: 'Fruit Into Baskets',\n    url: 'https://leetcode.com/problems/fruit-into-baskets/',\n    pattern: ['Sliding Window'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon'],\n  },\n  {\n    id: 98,\n    name: 'Permutation in String',\n    url: 'https://leetcode.com/problems/permutation-in-string/',\n    pattern: ['Sliding Window'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Oracle', 'Facebook'],\n  },\n  {\n    id: 99,\n    name: 'Longest Repeating Character Replacement',\n    url:\n      'https://leetcode.com/problems/longest-repeating-character-replacement/',\n    pattern: ['Sliding Window'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Facebook', 'Uber', 'Amazon', 'Adobe'],\n  },\n  {\n    id: 100,\n    name: 'Sliding Window Maximum',\n    url: 'https://leetcode.com/problems/sliding-window-maximum/',\n    pattern: ['Sliding Window'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Facebook',\n      'Goldman Sachs',\n      'Citadel',\n      'Google',\n      'Uber',\n      'Microsoft',\n      'Salesforce',\n      'Apple',\n      'Twitter',\n      'Atlassian',\n    ],\n  },\n  {\n    id: 101,\n    name: 'Longest Substring Without Repeating Characters',\n    url:\n      'https://leetcode.com/problems/longest-substring-without-repeating-characters/',\n    pattern: ['Sliding Window'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Microsoft',\n      'Bloomberg',\n      'Facebook',\n      'Adobe',\n      'Google',\n      'Apple',\n      'Uber',\n      'Goldman Sachs',\n    ],\n  },\n  {\n    id: 102,\n    name: 'Minimum Number of K Consecutive Bit Flips',\n    url:\n      'https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips/',\n    pattern: ['Sliding Window'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: ['Adobe'],\n  },\n  {\n    id: 103,\n    name: 'Count Unique Characters of All Substrings of a Given String',\n    url:\n      'https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/',\n    pattern: ['Sliding Window'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: ['Amazon'],\n  },\n  {\n    id: 104,\n    name: 'Minimum Window Substring',\n    url: 'https://leetcode.com/problems/minimum-window-substring/',\n    pattern: ['Sliding Window'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Amazon',\n      'LinkedIn',\n      'Snapchat',\n      'Google',\n      'Lyft',\n      'Adobe',\n    ],\n  },\n  {\n    id: 105,\n    name: 'Substring with Concatenation of All Words',\n    url:\n      'https://leetcode.com/problems/substring-with-concatenation-of-all-words/',\n    pattern: ['Sliding Window'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: ['Apple'],\n  },\n  {\n    id: 106,\n    name: 'Kth Smallest Element in a BST',\n    url: 'https://leetcode.com/problems/kth-smallest-element-in-a-bst/',\n    pattern: ['DFS'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon', 'Facebook'],\n  },\n  {\n    id: 107,\n    name: 'K Closest Points to Origin',\n    url: 'https://leetcode.com/problems/k-closest-points-to-origin/',\n    pattern: ['Heap'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Facebook', 'Amazon', 'LinkedIn', 'Google', 'Asana'],\n  },\n  {\n    id: 108,\n    name: 'Top K Frequent Elements',\n    url: 'https://leetcode.com/problems/top-k-frequent-elements/',\n    pattern: ['Heap'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Amazon',\n      'Bloomberg',\n      'Microsoft',\n      'Uber',\n      'Apple',\n      'Google',\n      'Adobe',\n      'Snapchat',\n      'Oracle',\n      'LinkedIn',\n    ],\n  },\n  {\n    id: 109,\n    name: 'Sort Characters By Frequency',\n    url: 'https://leetcode.com/problems/sort-characters-by-frequency/',\n    pattern: ['Heap'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon', 'Bloomberg', 'Facebook'],\n  },\n  {\n    id: 110,\n    name: 'Kth Largest Element in an Array',\n    url: 'https://leetcode.com/problems/kth-largest-element-in-an-array/',\n    pattern: ['Heap', 'QuickSelect'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Amazon',\n      'LinkedIn',\n      'Microsoft',\n      'Google',\n      'Goldman Sachs',\n      'Uber',\n      'Oracle',\n    ],\n  },\n  {\n    id: 111,\n    name: 'Reorganize String',\n    url: 'https://leetcode.com/problems/reorganize-string/',\n    pattern: ['Greedy', 'Heap'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon', 'Facebook', 'Google', 'Apple', 'Uber', 'Microsoft'],\n  },\n  {\n    id: 112,\n    name: 'Rearrange String k Distance Apart',\n    url: 'https://leetcode.com/problems/rearrange-string-k-distance-apart',\n    pattern: ['Greedy', 'Heap'],\n    difficulty: 'Hard',\n    premium: true,\n    companies: ['Twitter'],\n  },\n  {\n    id: 113,\n    name: 'Course Schedule III',\n    url: 'https://leetcode.com/problems/course-schedule-iii/',\n    pattern: ['Greedy', 'Heap'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: ['Amazon'],\n  },\n  {\n    id: 114,\n    name: 'Maximum Frequency Stack',\n    url: 'https://leetcode.com/problems/maximum-frequency-stack/',\n    pattern: ['Bucket Sort', 'Heap'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: ['Microsoft', 'Amazon', 'Apple', 'Facebook'],\n  },\n  {\n    id: 115,\n    name: 'Course Schedule',\n    url: 'https://leetcode.com/problems/course-schedule/',\n    pattern: ['BFS', 'DFS', 'Graph', 'Topological Sort'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Microsoft',\n      'Facebook',\n      'Google',\n      'Oracle',\n      'Apple',\n      'Snapchat',\n    ],\n  },\n  {\n    id: 116,\n    name: 'Course Schedule II',\n    url: 'https://leetcode.com/problems/course-schedule-ii/',\n    pattern: ['BFS', 'DFS', 'Graph', 'Topological Sort'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Microsoft',\n      'Google',\n      'Facebook',\n      'Snapchat',\n      'Uber',\n      'Apple',\n      'Lyft',\n      'Bloomberg',\n    ],\n  },\n  {\n    id: 117,\n    name: 'Minimum Height Trees',\n    url: 'https://leetcode.com/problems/minimum-height-trees/',\n    pattern: ['BFS', 'Graph', 'Topological Sort'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon', 'Facebook', 'Google', 'Microsoft'],\n  },\n  {\n    id: 118,\n    name: 'Alien Dictionary',\n    url: 'https://leetcode.com/problems/alien-dictionary',\n    pattern: ['Graph', 'Topological Sort'],\n    difficulty: 'Hard',\n    premium: true,\n    companies: [\n      'Facebook',\n      'Google',\n      'Amazon',\n      'Airbnb',\n      'Pinterest',\n      'Uber',\n      'Microsoft',\n    ],\n  },\n  {\n    id: 119,\n    name: 'Sequence Reconstruction',\n    url: 'https://leetcode.com/problems/sequence-reconstruction',\n    pattern: ['Graph', 'Topological Sort'],\n    difficulty: 'Medium',\n    premium: true,\n    companies: ['Google'],\n  },\n  {\n    id: 120,\n    name: 'Binary Tree Level Order Traversal II',\n    url: 'https://leetcode.com/problems/binary-tree-level-order-traversal-ii/',\n    pattern: ['BFS'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon'],\n  },\n  {\n    id: 121,\n    name: 'Average of Levels in Binary Tree',\n    url: 'https://leetcode.com/problems/average-of-levels-in-binary-tree/',\n    pattern: ['BFS'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Facebook', 'Amazon'],\n  },\n  {\n    id: 122,\n    name: 'Minimum Depth of Binary Tree',\n    url: 'https://leetcode.com/problems/minimum-depth-of-binary-tree/',\n    pattern: ['BFS', 'DFS'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Facebook', 'Goldman Sachs'],\n  },\n  {\n    id: 123,\n    name: 'Binary Tree Level Order Traversal',\n    url: 'https://leetcode.com/problems/binary-tree-level-order-traversal/',\n    pattern: ['BFS'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'LinkedIn',\n      'Amazon',\n      'Facebook',\n      'Bloomberg',\n      'Microsoft',\n      'Apple',\n      'Oracle',\n      'Google',\n    ],\n  },\n  {\n    id: 124,\n    name: 'Binary Tree Zigzag Level Order Traversal',\n    url:\n      'https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/',\n    pattern: ['BFS'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Facebook',\n      'Microsoft',\n      'Bloomberg',\n      'Google',\n      'Adobe',\n      'LinkedIn',\n      'Qualtrics',\n      'Salesforce',\n    ],\n  },\n  {\n    id: 125,\n    name: 'Populating Next Right Pointers in Each Node',\n    url:\n      'https://leetcode.com/problems/populating-next-right-pointers-in-each-node/',\n    pattern: ['BFS'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Facebook', 'Microsoft', 'Amazon', 'Bloomberg'],\n  },\n  {\n    id: 126,\n    name: 'Populating Next Right Pointers in Each Node II',\n    url:\n      'https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/',\n    pattern: ['BFS'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon', 'Bloomberg', 'Microsoft', 'Facebook'],\n  },\n  {\n    id: 127,\n    name: 'Binary Tree Right Side View',\n    url: 'https://leetcode.com/problems/binary-tree-right-side-view/',\n    pattern: ['BFS', 'DFS'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Bloomberg',\n      'Amazon',\n      'Oracle',\n      'Qualtrics',\n      'Adobe',\n      'Goldman Sachs',\n    ],\n  },\n  {\n    id: 128,\n    name: 'All Nodes Distance K in Binary Tree',\n    url: 'https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/',\n    pattern: ['BFS', 'DFS'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Facebook', 'Amazon', 'Apple', 'Oracle'],\n  },\n  {\n    id: 129,\n    name: 'Same Tree',\n    url: 'https://leetcode.com/problems/same-tree/',\n    pattern: ['DFS'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: [\n      'LinkedIn',\n      'Google',\n      'Microsoft',\n      'Amazon',\n      'Facebook',\n      'Apple',\n      'Adobe',\n      'Oracle',\n    ],\n  },\n  {\n    id: 130,\n    name: 'Path Sum',\n    url: 'https://leetcode.com/problems/path-sum/',\n    pattern: ['DFS'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Amazon', 'Facebook', 'Oracle'],\n  },\n  {\n    id: 131,\n    name: 'Maximum Depth of Binary Tree',\n    url: 'https://leetcode.com/problems/maximum-depth-of-binary-tree/',\n    pattern: ['DFS'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['LinkedIn', 'Google', 'Apple', 'Amazon'],\n  },\n  {\n    id: 132,\n    name: 'Diameter of Binary Tree',\n    url: 'https://leetcode.com/problems/diameter-of-binary-tree/',\n    pattern: ['DFS'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Amazon',\n      'Google',\n      'Bloomberg',\n      'Apple',\n      'Microsoft',\n      'Adobe',\n    ],\n  },\n  {\n    id: 133,\n    name: 'Merge Two Binary Trees',\n    url: 'https://leetcode.com/problems/merge-two-binary-trees/',\n    pattern: ['DFS'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Amazon', 'Adobe'],\n  },\n  {\n    id: 134,\n    name: 'Lowest Common Ancestor of a Binary Search Tree',\n    url:\n      'https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/',\n    pattern: ['DFS'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['LinkedIn', 'Facebook', 'Microsoft', 'Google', 'Uber'],\n  },\n  {\n    id: 135,\n    name: 'Subtree of Another Tree',\n    url: 'https://leetcode.com/problems/subtree-of-another-tree/',\n    pattern: ['DFS'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Facebook', 'Amazon', 'Microsoft'],\n  },\n  {\n    id: 136,\n    name: 'Invert Binary Tree',\n    url: 'https://leetcode.com/problems/invert-binary-tree/',\n    pattern: ['DFS'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Amazon', 'Google', 'Facebook', 'Adobe', 'Apple'],\n  },\n  {\n    id: 137,\n    name: 'Path Sum II',\n    url: 'https://leetcode.com/problems/path-sum-ii/',\n    pattern: ['DFS'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon', 'Google', 'Facebook', 'Adobe', 'Apple'],\n  },\n  {\n    id: 138,\n    name: 'Path Sum III',\n    url: 'https://leetcode.com/problems/path-sum-iii/',\n    pattern: ['DFS'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Microsoft', 'Facebook', 'Google', 'Oracle'],\n  },\n  {\n    id: 139,\n    name: 'Lowest Common Ancestor of a Binary Tree',\n    url:\n      'https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/',\n    pattern: ['DFS'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Amazon',\n      'LinkedIn',\n      'Google',\n      'Microsoft',\n      'Adobe',\n      'Apple',\n      'Salesforce',\n      'Oracle',\n      'Bloomberg',\n      'Intuit',\n    ],\n  },\n  {\n    id: 140,\n    name: 'Maximum Binary Tree',\n    url: 'https://leetcode.com/problems/maximum-binary-tree/',\n    pattern: ['DFS'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon'],\n  },\n  {\n    id: 141,\n    name: 'Maximum Width of Binary Tree',\n    url: 'https://leetcode.com/problems/maximum-width-of-binary-tree/',\n    pattern: ['DFS'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon', 'Google', 'Bloomberg', 'Apple', 'Adobe'],\n  },\n  {\n    id: 142,\n    name: 'Construct Binary Tree from Preorder and Inorder Traversal',\n    url:\n      'https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/',\n    pattern: ['DFS'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Amazon', 'Microsoft', 'Adobe', 'Bloomberg', 'Apple'],\n  },\n  {\n    id: 143,\n    name: 'Validate Binary Search Tree',\n    url: 'https://leetcode.com/problems/validate-binary-search-tree/',\n    pattern: ['DFS'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Bloomberg',\n      'Microsoft',\n      'Facebook',\n      'Google',\n      'Adobe',\n      'Apple',\n      'Qualtrics',\n      'Lyft',\n    ],\n  },\n  {\n    id: 144,\n    name: 'Implement Trie (Prefix Tree)',\n    url: 'https://leetcode.com/problems/implement-trie-prefix-tree/',\n    pattern: ['Design', 'Trie'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Twitter',\n      'Google',\n      'Facebook',\n      'Microsoft',\n      'Apple',\n    ],\n  },\n  {\n    id: 145,\n    name: 'Binary Tree Maximum Path Sum',\n    url: 'https://leetcode.com/problems/binary-tree-maximum-path-sum/',\n    pattern: ['DFS'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Amazon',\n      'Google',\n      'Microsoft',\n      'Adobe',\n      'Bloomberg',\n      'Oracle',\n      'Snapchat',\n    ],\n  },\n  {\n    id: 146,\n    name: 'Serialize and Deserialize Binary Tree',\n    url: 'https://leetcode.com/problems/serialize-and-deserialize-binary-tree/',\n    pattern: ['Design'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: [\n      'LinkedIn',\n      'Amazon',\n      'Microsoft',\n      'Facebook',\n      'Oracle',\n      'Uber',\n      'Adobe',\n      'Snapchat',\n      'Qualtrics',\n      'Google',\n      'Quora',\n    ],\n  },\n  {\n    id: 147,\n    name: 'Word Search II',\n    url: 'https://leetcode.com/problems/word-search-ii/',\n    pattern: ['DFS', 'Trie'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Uber',\n      'Microsoft',\n      'Apple',\n      'Twitter',\n      'Snapchat',\n      'Facebook',\n      'Bloomberg',\n      'Google',\n      'Salesforce',\n    ],\n  },\n  {\n    id: 148,\n    name: 'Find Median from Data Stream',\n    url: 'https://leetcode.com/problems/find-median-from-data-stream/',\n    pattern: ['Heap'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Microsoft',\n      'Apple',\n      'Facebook',\n      'Google',\n      'Bloomberg',\n      'Uber',\n      'Airbnb',\n    ],\n  },\n  {\n    id: 149,\n    name: 'Sliding Window Median',\n    url: 'https://leetcode.com/problems/sliding-window-median/',\n    pattern: ['Heap'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: ['Facebook', 'Amazon'],\n  },\n  {\n    id: 150,\n    name: 'Two Sum',\n    url: 'https://leetcode.com/problems/two-sum/',\n    pattern: ['Two Pointers'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Google',\n      'Adobe',\n      'Apple',\n      'Microsoft',\n      'Facebook',\n      'Bloomberg',\n      'Uber',\n      'Oracle',\n      'Morgan Stanley',\n      'Citadel',\n      'Salesforce',\n      'Goldman Sachs',\n      'JPMorgan',\n      'Snapchat',\n    ],\n  },\n  {\n    id: 151,\n    name: 'Squares of a Sorted Array',\n    url: 'https://leetcode.com/problems/squares-of-a-sorted-array/',\n    pattern: ['Two Pointers'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Facebook', 'Amazon', 'Google', 'Adobe', 'Apple', 'Uber'],\n  },\n  {\n    id: 152,\n    name: 'Backspace String Compare',\n    url: 'https://leetcode.com/problems/backspace-string-compare/',\n    pattern: ['Two Pointers'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Facebook', 'Amazon', 'Apple', 'Google', 'Microsoft'],\n  },\n  {\n    id: 153,\n    name: '3 Sum',\n    url: 'https://leetcode.com/problems/3sum/',\n    pattern: ['Two Pointers'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Facebook',\n      'Apple',\n      'Microsoft',\n      'Adobe',\n      'Google',\n      'Bloomberg',\n      'Intuit',\n      'Qualtrics',\n      'Salesforce',\n      'Goldman Sachs',\n      'Uber',\n      'Oracle',\n    ],\n  },\n  {\n    id: 154,\n    name: '3 Sum Closest',\n    url: 'https://leetcode.com/problems/3sum-closest/',\n    pattern: ['Two Pointers'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Amazon',\n      'Capital One',\n      'Apple',\n      'Google',\n      'Adobe',\n      'Microsoft',\n      'Oracle',\n    ],\n  },\n  {\n    id: 155,\n    name: 'Subarrays with Product Less than K',\n    url: 'https://leetcode.com/problems/subarray-product-less-than-k/',\n    pattern: ['Two Pointers'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['LinkedIn', 'Amazon', 'Microsoft'],\n  },\n  {\n    id: 156,\n    name: 'Sort Colours',\n    url: 'https://leetcode.com/problems/sort-colors/',\n    pattern: ['Two Pointers'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Microsoft',\n      'Amazon',\n      'Adobe',\n      'Facebook',\n      'Apple',\n      'Salesforce',\n      'Bloomberg',\n    ],\n  },\n  {\n    id: 157,\n    name: 'Trapping Rain Water',\n    url: 'https://leetcode.com/problems/trapping-rain-water/',\n    pattern: ['Two Pointers'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: [\n      'Facebook',\n      'Amazon',\n      'Goldman Sachs',\n      'Microsoft',\n      'Adobe',\n      'Google',\n      'Bloomberg',\n      'Qualtrics',\n      'Snapchat',\n      'Lyft',\n      'Uber',\n      'Apple',\n      'Citadel',\n      'Tesla',\n    ],\n  },\n  {\n    id: 158,\n    name: 'Container With Most Water',\n    url: 'https://leetcode.com/problems/container-with-most-water/',\n    pattern: ['Two Pointers'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Microsoft',\n      'Google',\n      'Adobe',\n      'Bloomberg',\n      'Apple',\n      'Uber',\n      'Facebook',\n    ],\n  },\n  {\n    id: 159,\n    name: 'Longest Word in Dictionary',\n    url: 'https://leetcode.com/problems/longest-word-in-dictionary/',\n    pattern: ['Trie'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Google'],\n  },\n  {\n    id: 160,\n    name: 'Index Pairs of a String',\n    url: 'https://leetcode.com/problems/index-pairs-of-a-string/',\n    pattern: ['Trie'],\n    difficulty: 'Easy',\n    premium: true,\n    companies: ['Amazon'],\n  },\n  {\n    id: 161,\n    name: 'Maximum XOR of Two Numbers in an Array',\n    url: 'https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array',\n    pattern: ['Trie'],\n    difficulty: 'Medium',\n    premium: false,\n    companies: ['Adobe'],\n  },\n  {\n    id: 162,\n    name: 'Concatenated Words',\n    url: 'https://leetcode.com/problems/concatenated-words/',\n    pattern: ['Trie'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: ['Amazon', 'Microsoft'],\n  },\n  {\n    id: 163,\n    name: 'Prefix and Suffix Search',\n    url: 'https://leetcode.com/problems/prefix-and-suffix-search/',\n    pattern: ['Trie'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: ['Google'],\n  },\n  {\n    id: 164,\n    name: 'Palindrome Pairs',\n    url: 'https://leetcode.com/problems/palindrome-pairs/',\n    pattern: ['Trie'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: ['Airbnb', 'Facebook', 'Google'],\n  },\n  {\n    id: 165,\n    name: 'Design Search Autocomplete System',\n    url: 'https://leetcode.com/problems/design-search-autocomplete-system/',\n    pattern: ['Trie'],\n    difficulty: 'Hard',\n    premium: true,\n    companies: [\n      'Amazon',\n      'Google',\n      'Microsoft',\n      'Uber',\n      'Bloomberg',\n      'Twitter',\n    ],\n  },\n  {\n    id: 166,\n    name: 'Word Squares',\n    url: 'https://leetcode.com/problems/word-squares/',\n    pattern: ['Trie'],\n    difficulty: 'Hard',\n    premium: true,\n    companies: ['Bloomberg', 'Oracle', 'Google'],\n  },\n  {\n    id: 167,\n    name: 'Sort Items by Groups Respecting Dependencies',\n    url:\n      'https://leetcode.com/problems/sort-items-by-groups-respecting-dependencies/',\n    pattern: ['DFS', 'Graph', 'Topological Sort'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: ['Apple'],\n  },\n  {\n    id: 168,\n    name: 'Median of Two Sorted Arrays',\n    url: 'https://leetcode.com/problems/median-of-two-sorted-arrays/',\n    pattern: ['Binary Search'],\n    difficulty: 'Hard',\n    premium: false,\n    companies: [\n      'Amazon',\n      'Goldman Sachs',\n      'Microsoft',\n      'Google',\n      'Adobe',\n      'Facebook',\n      'Apple',\n      'Bloomberg',\n      'Oracle',\n    ],\n  },\n  {\n    id: 169,\n    name: 'Majority Element',\n    url: 'https://leetcode.com/problems/majority-element/',\n    pattern: ['Sorting'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Amazon', 'Facebook', 'Apple', 'Microsoft', 'Adobe'],\n  },\n  {\n    id: 170,\n    name: 'Convert 1D Array Into 2D Array',\n    url: 'https://leetcode.com/problems/convert-1d-array-into-2d-array/',\n    pattern: ['Arrays'],\n    difficulty: 'Easy',\n    premium: false,\n    companies: ['Google'],\n  },\n];\n\nconst sortBy = { Easy: 0, Medium: 1, Hard: 2 };\n\nexport default questions.sort(\n  (a, b) => sortBy[a.difficulty] - sortBy[b.difficulty],\n);\n","import { Badge } from 'reactstrap';\nimport React from 'react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport PropTypes from 'prop-types';\nimport './styles.scss';\n\nconst PatternFrequencies = ({ filters, rows }) => {\n  const patternsMap = rows.reduce((acc, row) => {\n    for (let i = 0; i < row.original.pattern.length; i += 1) {\n      const pattern = row.original.pattern[i];\n      acc[pattern] = acc[pattern] + 1 || 1;\n    }\n    return acc;\n  }, Object.create(null));\n  const sortedPatternsByFrequency = Object.keys(patternsMap).sort(\n    (a, b) => patternsMap[b] - patternsMap[a],\n  );\n  const showComponent = filters.find(filter =>\n    ['companies', 'difficulty'].includes(filter.id),\n  );\n\n  const getFrequencyClass = rate => {\n    const highestFrequency = Math.round(\n      patternsMap[sortedPatternsByFrequency[0]],\n    );\n\n    if (highestFrequency / 3 < 1) {\n      return '';\n    }\n\n    const frequencyRate = {\n      easy: Math.round(highestFrequency / 3),\n      medium: Math.round((highestFrequency / 3) * 2),\n      hard: highestFrequency,\n    };\n\n    return Object.keys(frequencyRate).find(key => rate <= frequencyRate[key]);\n  };\n\n  return showComponent ? (\n    <div className=\"pattern-count\">\n      <h5>Problems pattern frequency</h5>\n      {sortedPatternsByFrequency.map((pattern, index) => (\n        <Badge\n          // eslint-disable-next-line react/no-array-index-key\n          key={pattern + index}\n          className={`${getFrequencyClass(patternsMap[pattern])}`}\n          pill\n        >\n          <span\n            data-tip={`${patternsMap[pattern]} \"${pattern}\" related problems`}\n          >\n            {pattern} : {patternsMap[pattern]}\n          </span>\n        </Badge>\n      ))}\n    </div>\n  ) : null;\n};\n\nPatternFrequencies.propTypes = {\n  filters: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.string, value: PropTypes.string }),\n  ).isRequired,\n  rows: PropTypes.arrayOf(\n    PropTypes.shape({\n      original: PropTypes.shape({\n        pattern: PropTypes.arrayOf(PropTypes.string),\n      }),\n    }),\n  ).isRequired,\n};\n\nexport default PatternFrequencies;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useState, useEffect } from 'react';\nimport {\n  Table as ReactTable,\n  Container,\n  Row,\n  Badge,\n  NavLink,\n  Button,\n} from 'reactstrap';\nimport Toggle from 'react-toggle';\nimport ReactTooltip from 'react-tooltip';\nimport { useTable, useFilters, useSortBy } from 'react-table';\nimport { FaLock, FaExternalLinkAlt, FaQuestionCircle } from 'react-icons/fa';\nimport {\n  DefaultColumnFilter,\n  SelectDifficultyColumnFilter,\n  SelectColumnFilter,\n} from './filters';\nimport { Event } from '../Shared/Tracking';\n\nimport questions from '../../data';\n\nimport 'react-toggle/style.css';\nimport './styles.scss';\nimport PatternFrequencies from '../PatternFrequencies';\n\nconst iconPath = `${process.env.PUBLIC_URL}/assets/icons/`;\n\nconst Table = () => {\n  const data = React.useMemo(() => questions, []);\n  const [resetCount, setResetCount] = useState(0);\n  let checkedList =\n    JSON.parse(localStorage.getItem('checked')) ||\n    new Array(data.length).fill(false);\n  const notesList =\n    JSON.parse(localStorage.getItem('notes')) ||\n    new Array(data.length).fill('');\n  /* If the user has previously visited the website, then an array in\n  LocalStorage would exist of a certain length which corresponds to which\n  questions they have/have not completed. In the event that we add new questions\n  to the list, then we would need to resize and copy the existing 'checked'\n  array before updating it in LocalStorage in order to transfer their saved\n  progress. */\n  if (checkedList.length !== data.length) {\n    const resizedCheckedList = new Array(data.length).fill(false);\n\n    for (let i = 0; i < checkedList.length; i += 1) {\n      resizedCheckedList[i] = checkedList[i];\n    }\n\n    checkedList = resizedCheckedList;\n    window.localStorage.setItem('checked', JSON.stringify(checkedList));\n  }\n\n  const difficultyMap = { Easy: 0, Medium: 0, Hard: 0 };\n  const totalDifficultyCount = { Easy: 0, Medium: 0, Hard: 0 };\n  for (let i = 0; i < data.length; i += 1) {\n    difficultyMap[data[i].difficulty] += checkedList[data[i].id];\n    totalDifficultyCount[data[i].difficulty] += 1;\n  }\n\n  const [difficultyCount, setDifficultyCount] = useState(difficultyMap);\n  const [checked, setChecked] = useState(checkedList);\n  const [notes, setNotes] = useState(notesList);\n  const [showPatterns, setShowPatterns] = useState(\n    JSON.parse(localStorage.getItem('showPatterns')) || new Array(1).fill(true),\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem('checked', JSON.stringify(checked));\n  }, [checked]);\n\n  useEffect(() => {\n    window.localStorage.setItem('notes', JSON.stringify(notes));\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem('showPatterns', JSON.stringify(showPatterns));\n  }, [showPatterns]);\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      Filter: DefaultColumnFilter,\n      minWidth: 30,\n      maxWidth: 30,\n    }),\n    [],\n  );\n\n  const resetHandler = () => {\n    setChecked(new Array(checked.length).fill(false));\n    setNotes(new Array(checked.length).fill(''));\n    setDifficultyCount(() => {\n      return { Easy: 0, Medium: 0, Hard: 0 };\n    });\n    const count = resetCount + 1;\n    setResetCount(count);\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Leetcode Patterns',\n        columns: [\n          {\n            Header: () => {\n              return (\n                <span>\n                  <Badge className=\"\" pill>\n                    <span\n                      data-tip={`You've completed ${difficultyCount.Easy +\n                        difficultyCount.Medium +\n                        difficultyCount.Hard}/${totalDifficultyCount.Easy +\n                        totalDifficultyCount.Medium +\n                        totalDifficultyCount.Hard} total questions`}\n                    >\n                      Total:{' '}\n                      {difficultyCount.Easy +\n                        difficultyCount.Medium +\n                        difficultyCount.Hard}\n                      /\n                      {totalDifficultyCount.Easy +\n                        totalDifficultyCount.Medium +\n                        totalDifficultyCount.Hard}\n                    </span>\n                  </Badge>\n                  <br />\n                  <Badge className=\"easy\" pill>\n                    <span\n                      data-tip={`You've completed ${difficultyCount.Easy}/${totalDifficultyCount.Easy} easy questions`}\n                    >\n                      Easy: {difficultyCount.Easy}/{totalDifficultyCount.Easy}\n                    </span>\n                  </Badge>\n                  <br />\n                  <Badge className=\"medium\" pill>\n                    <span\n                      data-tip={`You've completed ${difficultyCount.Medium}/${totalDifficultyCount.Medium} medium questions`}\n                    >\n                      Medium: {difficultyCount.Medium}/\n                      {totalDifficultyCount.Medium}\n                    </span>\n                  </Badge>\n                  <br />\n                  <Badge className=\"hard\" pill>\n                    <span\n                      data-tip={`You've completed ${difficultyCount.Hard}/${totalDifficultyCount.Hard} hard questions`}\n                    >\n                      Hard: {difficultyCount.Hard}/{totalDifficultyCount.Hard}\n                    </span>\n                  </Badge>\n                  <br />\n                  <Button\n                    className=\"reset-button\"\n                    outline\n                    size=\"sm\"\n                    color=\"danger\"\n                    onClick={resetHandler}\n                  >\n                    Reset\n                  </Button>\n                </span>\n              );\n            },\n            id: 'Checkbox',\n            Cell: cellInfo => {\n              return (\n                <span data-tip={`Question #${Number(cellInfo.row.id) + 1}`}>\n                  <input\n                    type=\"checkbox\"\n                    checked={checked[cellInfo.row.original.id]}\n                    onChange={() => {\n                      checked[cellInfo.row.original.id] = !checked[\n                        cellInfo.row.original.id\n                      ];\n\n                      const additive = checked[cellInfo.row.original.id]\n                        ? 1\n                        : -1;\n                      difficultyCount[\n                        cellInfo.row.original.difficulty\n                      ] += additive;\n                      setDifficultyCount(difficultyCount);\n                      setChecked([...checked]);\n                    }}\n                  />\n                </span>\n              );\n            },\n          },\n          {\n            Header: 'Questions',\n            accessor: 'questions',\n            disableSortBy: true,\n            Cell: cellInfo => {\n              return (\n                <NavLink\n                  target=\"_blank\"\n                  href={cellInfo.row.original.url}\n                  onClick={() => {\n                    Event(\n                      'Table',\n                      'Clicked question url',\n                      `${cellInfo.row.original.name} question url`,\n                    );\n                  }}\n                >\n                  {cellInfo.row.original.premium ? (\n                    <span data-tip=\"Requires leetcode premium to view\">\n                      <FaLock />{' '}\n                    </span>\n                  ) : (\n                    ''\n                  )}\n                  {cellInfo.row.original.name}\n                </NavLink>\n              );\n            },\n            disableFilters: true,\n          },\n          {\n            Header: 'Solutions',\n            accessor: 'solutions',\n            disableSortBy: true,\n            Cell: cellInfo => {\n              const url = cellInfo.row.original.premium\n                ? `${cellInfo.row.original.url}/`\n                : cellInfo.row.original.url;\n              return (\n                <NavLink\n                  target=\"_blank\"\n                  href={`${url}discuss/?currentPage=1&orderBy=most_votes`}\n                  onClick={() => {\n                    Event(\n                      'Table',\n                      'Clicked solution',\n                      `${cellInfo.row.original.name} solution`,\n                    );\n                  }}\n                >\n                  <FaExternalLinkAlt />\n                </NavLink>\n              );\n            },\n            disableFilters: true,\n          },\n          {\n            Header: () => {\n              return (\n                // eslint-disable-next-line\n                // eslint-disable-next-line jsx-a11y/label-has-associated-control\n                <label htmlFor=\"pattern-toggle\">\n                  <span>Show/Hide Patterns </span>\n                  <Toggle\n                    id=\"pattern-toggle\"\n                    defaultChecked={showPatterns[0]}\n                    icons={{\n                      checked: null,\n                      unchecked: null,\n                    }}\n                    onChange={() => {\n                      showPatterns[0] = !showPatterns[0];\n                      setShowPatterns([...showPatterns]);\n                    }}\n                  />\n                </label>\n              );\n            },\n            accessor: 'pattern',\n            disableSortBy: true,\n            Cell: cellInfo => {\n              const patterns = `${cellInfo.row.original.pattern}`\n                .split(',')\n                .map(pattern => {\n                  if (showPatterns[0] || checked[cellInfo.row.original.id]) {\n                    return (\n                      <Badge key={pattern} pill>\n                        {pattern}\n                      </Badge>\n                    );\n                  }\n\n                  return (\n                    <Badge key={pattern} pill>\n                      ***\n                    </Badge>\n                  );\n                });\n\n              return <Row className=\"patterns\">{patterns}</Row>;\n            },\n\n            Filter: SelectColumnFilter,\n          },\n          {\n            Header: 'Difficulty',\n            accessor: 'difficulty',\n            disableSortBy: true,\n            Cell: cellInfo => (\n              <Row>\n                <Badge\n                  className={cellInfo.row.original.difficulty.toLowerCase()}\n                  pill\n                >\n                  {cellInfo.row.original.difficulty}\n                </Badge>\n              </Row>\n            ),\n            Filter: SelectDifficultyColumnFilter,\n          },\n          {\n            Header: () => {\n              return (\n                <>\n                  <div\n                    style={{ whiteSpace: 'nowrap', display: 'inline-block' }}\n                  >\n                    Companies{' '}\n                    <span data-tip=\"Companies retrieved from Leetcode Premium (January 2022)\">\n                      <FaQuestionCircle />\n                    </span>\n                  </div>\n                </>\n              );\n            },\n            accessor: 'companies',\n            sortType: (a, b) => {\n              if (a.original.companies.length === b.original.companies.length) {\n                return 0;\n              }\n              return a.original.companies.length > b.original.companies.length\n                ? 1\n                : -1;\n            },\n            Cell: cellInfo => {\n              const companies = cellInfo.row.original.companies.map(company => {\n                return (\n                  <img\n                    key={company}\n                    src={`${iconPath}${company}.png`}\n                    alt={company}\n                    data-tip={company}\n                  />\n                );\n              });\n\n              return <Row className=\"companies\">{companies}</Row>;\n            },\n            Filter: SelectColumnFilter,\n          },\n          {\n            Header: 'Notes',\n            id: 'Notes',\n            Cell: cellInfo => {\n              return (\n                <textarea\n                  value={notes[cellInfo.row.original.id]}\n                  cols=\"40\"\n                  onChange={({ target }) => {\n                    notes[cellInfo.row.original.id] = target.value;\n                    setNotes([...notes]);\n                  }}\n                />\n              );\n            },\n            Filter: SelectColumnFilter,\n          },\n        ],\n      },\n    ],\n    // eslint-disable-next-line\n    [resetCount],\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    filteredRows,\n    state: { filters },\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n    },\n    useFilters,\n    useSortBy,\n  );\n\n  return (\n    <Container className=\"table\">\n      <ReactTooltip />\n      <PatternFrequencies filters={filters} rows={filteredRows} />\n      <ReactTable borderless striped hover {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>\n                  <div {...column.getSortByToggleProps({ title: null })}>\n                    {column.render('Header')}\n                    {/* eslint-disable-next-line no-nested-ternary */}\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' 🔽'\n                        : ' 🔼'\n                      : ''}\n                  </div>\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n        <tbody {...getTableBodyProps()}>\n          {rows.map(row => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </ReactTable>\n    </Container>\n  );\n};\n\nexport default Table;\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nimport './styles.scss';\n\nconst Tips = () => {\n  const input = `\n  \\`\\`\\`md\nIf input array is sorted then\n- Binary search\n- Two pointers\n\nIf asked for all permutations/subsets then\n- Backtracking\n\nIf given a tree then\n- DFS\n- BFS\n\nIf given a graph then\n- DFS\n- BFS\n\nIf given a linked list then\n- Two pointers\n\nIf recursion is banned then\n- Stack\n\nIf must solve in-place then\n- Swap corresponding values\n- Store one or more different values in the same pointer\n\nIf asked for maximum/minumum subarray/subset/options then\n- Dynamic programming\n\nIf asked for top/least K items then\n- Heap\n\nIf asked for common strings then\n- Map\n- Trie\n\nElse\n- Map/Set for O(1) time & O(n) space\n- Sort input for O(nlogn) time and O(1) space\n\\`\\`\\``;\n\n  return <ReactMarkdown className=\"tips\" source={input} />;\n};\n\nexport default Tips;\n","import React from 'react';\nimport {\n  Card,\n  CardImg,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  NavLink,\n  Row,\n  Col,\n  Container,\n} from 'reactstrap';\nimport { Event } from '../Shared/Tracking';\n\nimport './styles.scss';\n\nconst imagePath = `${process.env.PUBLIC_URL}/assets/images/`;\nconst Blind = `${imagePath}Blind.png`;\nconst Educative = `${imagePath}Educative.png`;\nconst Hackernoon = `${imagePath}Hackernoon.png`;\n\nconst Acknowledgements = () => {\n  return (\n    <Container className=\"acknowledgements\">\n      <Row>\n        <h1>\n          The following sources were used in aggregating this question list:\n        </h1>\n      </Row>\n      <Row>\n        <Col sm={3}>\n          <Card>\n            <CardImg top width=\"100%\" src={Blind} alt=\"Blind 75 Question\" />\n            <CardBody>\n              <CardTitle>Blind Curated 75 Question List</CardTitle>\n              <CardSubtitle>\n                <NavLink\n                  target=\"_blank\"\n                  href=\"https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-100-LeetCode-Questions-to-Save-Your-Time-OaM1orEU\"\n                  onClick={() => {\n                    Event('Acknowledgements', 'Clicked URL', 'Blind 75 url');\n                  }}\n                >\n                  https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-100-LeetCode-Questions-to-Save-Your-Time-OaM1orEU\n                </NavLink>\n              </CardSubtitle>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col sm={3}>\n          <Card>\n            <CardImg top width=\"100%\" src={Educative} alt=\"Educative.io\" />\n            <CardBody>\n              <CardTitle>Grokking the Coding Interview</CardTitle>\n              <CardSubtitle>\n                <NavLink\n                  target=\"_blank\"\n                  href=\"https://www.educative.io/courses/grokking-the-coding-interview\"\n                  onClick={() => {\n                    Event(\n                      'Acknowledgements',\n                      'Clicked URL',\n                      'Educative.io url',\n                    );\n                  }}\n                >\n                  https://www.educative.io/courses/grokking-the-coding-interview\n                </NavLink>\n              </CardSubtitle>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col sm={3}>\n          <Card>\n            <CardImg top width=\"100%\" src={Hackernoon} alt=\"Hackernoon\" />\n            <CardBody>\n              <CardTitle>\n                14 Patterns to Ace Any Coding Interview Question\n              </CardTitle>\n              <CardSubtitle>\n                <NavLink\n                  target=\"_blank\"\n                  href=\"https://hackernoon.com/14-patterns-to-ace-any-coding-interview-question-c5bb3357f6ed\"\n                  onClick={() => {\n                    Event('Acknowledgements', 'Clicked URL', 'Hackernoon url');\n                  }}\n                >\n                  https://hackernoon.com/14-patterns-to-ace-any-coding-interview-question-c5bb3357f6ed\n                </NavLink>\n              </CardSubtitle>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Acknowledgements;\n","import React, { useState } from 'react';\nimport {\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink,\n  Container,\n} from 'reactstrap';\nimport classnames from 'classnames';\nimport { Event } from '../Shared/Tracking';\n\nimport Table from '../Table';\nimport Tips from '../Tips';\nimport Acknowledgements from '../Acknowledgements';\n\nimport './styles.scss';\n\nconst Tabs = () => {\n  const [activeTab, setActiveTab] = useState('1');\n\n  const toggle = tab => {\n    if (activeTab !== tab) setActiveTab(tab);\n  };\n\n  return (\n    <Container>\n      <Nav tabs>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '1' })}\n            onClick={() => {\n              toggle('1');\n              Event('Tabs', 'Clicked Tab', 'Question List tab');\n            }}\n          >\n            Question List\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '2' })}\n            onClick={() => {\n              toggle('2');\n              Event('Tabs', 'Clicked Tab', 'Tips tab');\n            }}\n          >\n            Tips\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '3' })}\n            onClick={() => {\n              toggle('3');\n              Event('Tabs', 'Clicked Tab', 'Acknowledgements tab');\n            }}\n          >\n            Acknowledgements\n          </NavLink>\n        </NavItem>\n      </Nav>\n      <TabContent activeTab={activeTab}>\n        <TabPane tabId=\"1\">\n          <Table />\n        </TabPane>\n        <TabPane tabId=\"2\">\n          <Tips />\n        </TabPane>\n        <TabPane tabId=\"3\">\n          <Acknowledgements />\n        </TabPane>\n      </TabContent>\n    </Container>\n  );\n};\n\nexport default Tabs;\n","import React from 'react';\n\nimport './styles.scss';\n\nimport Navigation from './Navigation';\nimport Tabs from './Tabs';\n\nimport { initGA, PageView } from './Shared/Tracking';\n\nclass App extends React.Component {\n  componentDidMount() {\n    initGA('UA-203108441-2', { debug: false });\n    PageView();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation />\n        <Tabs />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}